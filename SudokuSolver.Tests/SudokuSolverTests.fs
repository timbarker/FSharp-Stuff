namespace SudokuSolver.Tests

open Xunit
open FsUnit.Xunit

type ``A Sudoku When Solving``() = 

    static let empty = 
        [ [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ] ]
    
    static let emptySolution = 
        [ [ 1; 2; 3; 4; 5; 6; 7; 8; 9 ]
          [ 4; 5; 6; 7; 8; 9; 1; 2; 3 ]
          [ 7; 8; 9; 1; 2; 3; 4; 5; 6 ]
          [ 2; 1; 4; 3; 6; 5; 8; 9; 7 ]
          [ 3; 6; 5; 8; 9; 7; 2; 1; 4 ]
          [ 8; 9; 7; 2; 1; 4; 3; 6; 5 ]
          [ 5; 3; 1; 6; 4; 2; 9; 7; 8 ]
          [ 6; 4; 2; 9; 7; 8; 5; 3; 1 ]
          [ 9; 7; 8; 5; 3; 1; 6; 4; 2 ] ]
    
    static let trivial = 
        [ [ 0; 4; 2; 6; 3; 0; 5; 0; 0 ]
          [ 0; 0; 0; 2; 0; 0; 7; 0; 4 ]
          [ 0; 3; 8; 5; 0; 0; 0; 0; 2 ]
          [ 3; 2; 0; 0; 7; 0; 4; 0; 0 ]
          [ 0; 5; 0; 9; 0; 6; 0; 2; 0 ]
          [ 0; 0; 4; 0; 2; 0; 0; 8; 1 ]
          [ 2; 0; 0; 0; 0; 3; 1; 7; 0 ]
          [ 5; 0; 3; 0; 0; 8; 0; 0; 0 ]
          [ 0; 0; 7; 0; 5; 2; 8; 6; 0 ] ]
    
    static let trivialSolution = 
        [ [ 9; 4; 2; 6; 3; 7; 5; 1; 8 ]
          [ 1; 6; 5; 2; 8; 9; 7; 3; 4 ]
          [ 7; 3; 8; 5; 1; 4; 6; 9; 2 ]
          [ 3; 2; 9; 8; 7; 1; 4; 5; 6 ]
          [ 8; 5; 1; 9; 4; 6; 3; 2; 7 ]
          [ 6; 7; 4; 3; 2; 5; 9; 8; 1 ]
          [ 2; 8; 6; 4; 9; 3; 1; 7; 5 ]
          [ 5; 1; 3; 7; 6; 8; 2; 4; 9 ]
          [ 4; 9; 7; 1; 5; 2; 8; 6; 3 ] ]
    
    static let easy = 
        [ [ 0; 1; 8; 0; 9; 0; 0; 0; 6 ]
          [ 0; 3; 0; 0; 0; 4; 0; 0; 2 ]
          [ 4; 0; 5; 0; 0; 0; 3; 0; 0 ]
          [ 1; 0; 0; 0; 8; 0; 0; 0; 0 ]
          [ 0; 8; 0; 9; 4; 7; 0; 3; 0 ]
          [ 0; 0; 0; 0; 2; 0; 0; 0; 5 ]
          [ 0; 0; 6; 0; 0; 0; 2; 0; 9 ]
          [ 2; 0; 0; 1; 0; 0; 0; 6; 0 ]
          [ 3; 0; 0; 0; 6; 0; 5; 4; 0 ] ]
    
    static let easySolution = 
        [ [ 7; 1; 8; 3; 9; 2; 4; 5; 6 ]
          [ 6; 3; 9; 8; 5; 4; 1; 7; 2 ]
          [ 4; 2; 5; 7; 1; 6; 3; 9; 8 ]
          [ 1; 6; 7; 5; 8; 3; 9; 2; 4 ]
          [ 5; 8; 2; 9; 4; 7; 6; 3; 1 ]
          [ 9; 4; 3; 6; 2; 1; 7; 8; 5 ]
          [ 8; 7; 6; 4; 3; 5; 2; 1; 9 ]
          [ 2; 5; 4; 1; 7; 9; 8; 6; 3 ]
          [ 3; 9; 1; 2; 6; 8; 5; 4; 7 ] ]
    
    static let medium = 
        [ [ 0; 2; 5; 0; 0; 8; 0; 0; 0 ]
          [ 0; 0; 0; 0; 0; 2; 8; 6; 0 ]
          [ 9; 0; 0; 1; 7; 0; 0; 0; 0 ]
          [ 4; 0; 0; 7; 0; 0; 2; 1; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 7; 6; 0; 0; 3; 0; 0; 9 ]
          [ 0; 0; 0; 0; 1; 4; 0; 0; 2 ]
          [ 0; 3; 1; 2; 0; 0; 0; 0; 0 ]
          [ 0; 0; 0; 6; 0; 0; 7; 5; 0 ] ]
    
    static let mediumSolution = 
        [ [ 3; 2; 5; 4; 6; 8; 1; 9; 7 ]
          [ 7; 1; 4; 3; 9; 2; 8; 6; 5 ]
          [ 9; 6; 8; 1; 7; 5; 3; 2; 4 ]
          [ 4; 5; 9; 7; 8; 6; 2; 1; 3 ]
          [ 2; 8; 3; 9; 4; 1; 5; 7; 6 ]
          [ 1; 7; 6; 5; 2; 3; 4; 8; 9 ]
          [ 5; 9; 7; 8; 1; 4; 6; 3; 2 ]
          [ 6; 3; 1; 2; 5; 7; 9; 4; 8 ]
          [ 8; 4; 2; 6; 3; 9; 7; 5; 1 ] ]
    
    static let hard = 
        [ [ 0; 0; 0; 6; 0; 7; 0; 5; 4 ]
          [ 0; 0; 0; 0; 0; 5; 0; 0; 0 ]
          [ 3; 6; 0; 0; 0; 0; 0; 0; 0 ]
          [ 0; 4; 0; 0; 7; 0; 9; 0; 5 ]
          [ 0; 2; 0; 0; 0; 0; 0; 1; 0 ]
          [ 6; 0; 1; 0; 8; 0; 0; 7; 0 ]
          [ 0; 0; 0; 0; 0; 0; 0; 2; 3 ]
          [ 0; 0; 0; 7; 0; 0; 0; 0; 0 ]
          [ 9; 7; 0; 1; 0; 3; 0; 0; 0 ] ]
    
    static let hardSolution = 
        [ [ 2; 8; 9; 6; 3; 7; 1; 5; 4 ]
          [ 7; 1; 4; 8; 2; 5; 6; 3; 9 ]
          [ 3; 6; 5; 4; 1; 9; 2; 8; 7 ]
          [ 8; 4; 3; 2; 7; 1; 9; 6; 5 ]
          [ 5; 2; 7; 3; 9; 6; 4; 1; 8 ]
          [ 6; 9; 1; 5; 8; 4; 3; 7; 2 ]
          [ 1; 5; 6; 9; 4; 8; 7; 2; 3 ]
          [ 4; 3; 8; 7; 6; 2; 5; 9; 1 ]
          [ 9; 7; 2; 1; 5; 3; 8; 4; 6 ] ]
    
    [<Fact>]
    member x.``Empty sudoku should be solved``() = SudokuSolver.solve empty |> should equal emptySolution

    [<Fact>]
    member x.``Trivial sudoku should be solved``() = SudokuSolver.solve trivial |> should equal trivialSolution

    [<Fact>]
    member x.``Easy sudoku should be solved``() = SudokuSolver.solve easy |> should equal easySolution

    [<Fact>]
    member x.``Medium sudoku should be solved``() = SudokuSolver.solve medium |> should equal mediumSolution

    [<Fact>]
    member x.``Hard sudoku should be solved``() = SudokuSolver.solve hard |> should equal hardSolution

type ``An Invalid Sudoku When Solving``() = 
    
    let invalidSudoku = 
        [ [ 0; 4; 2; 6; 3; 0; 5; 0; 0 ]
          [ 0; 0; 0; 2; 0; 0; 7; 0; 4 ]
          [ 0; 3; 8; 5; 0; 0; 0; 0; 2 ]
          [ 3; 2; 0; 0; 7; 0; 4; 0; 0 ]
          [ 0; 5; 0; 9; 0; 6; 0; 2; 0 ]
          [ 0; 0; 4; 0; 2; 0; 0; 8; 1 ]
          [ 2; 0; 0; 0; 0; 3; 1; 7; 0 ]
          [ 5; 0; 3; 0; 0; 8; 0; 0; 0 ]
          [ 0; 0; 7; 0; 5; 2; 8; 6; 4 ] ]

    [<Fact>]
    member x.``Should fail with an exeption``() = 
        (fun() -> SudokuSolver.solve invalidSudoku |> ignore) 
            |> should throw typeof<System.ArgumentException>
